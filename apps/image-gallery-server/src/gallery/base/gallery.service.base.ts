/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Gallery as PrismaGallery,
  Image as PrismaImage,
} from "@prisma/client";

export class GalleryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GalleryCountArgs, "select">): Promise<number> {
    return this.prisma.gallery.count(args);
  }

  async galleries<T extends Prisma.GalleryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GalleryFindManyArgs>
  ): Promise<PrismaGallery[]> {
    return this.prisma.gallery.findMany<Prisma.GalleryFindManyArgs>(args);
  }
  async gallery<T extends Prisma.GalleryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GalleryFindUniqueArgs>
  ): Promise<PrismaGallery | null> {
    return this.prisma.gallery.findUnique(args);
  }
  async createGallery<T extends Prisma.GalleryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GalleryCreateArgs>
  ): Promise<PrismaGallery> {
    return this.prisma.gallery.create<T>(args);
  }
  async updateGallery<T extends Prisma.GalleryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GalleryUpdateArgs>
  ): Promise<PrismaGallery> {
    return this.prisma.gallery.update<T>(args);
  }
  async deleteGallery<T extends Prisma.GalleryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GalleryDeleteArgs>
  ): Promise<PrismaGallery> {
    return this.prisma.gallery.delete(args);
  }

  async findImages(
    parentId: string,
    args: Prisma.ImageFindManyArgs
  ): Promise<PrismaImage[]> {
    return this.prisma.gallery
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .images(args);
  }
}
